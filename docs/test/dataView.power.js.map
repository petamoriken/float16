{
  "version": 3,
  "sources": [
    "test/dataView.js"
  ],
  "names": [
    "_PowerAssertRecorder1",
    "PowerAssertRecorder",
    "captured",
    "prototype",
    "_capt",
    "value",
    "espath",
    "push",
    "_expr",
    "source",
    "capturedValues",
    "powerAssertContext",
    "events",
    "buffer",
    "ArrayBuffer",
    "dataView",
    "DataView",
    "clear",
    "Uint16Array",
    "describe",
    "beforeEach",
    "it",
    "_rec1",
    "assert",
    "getFloat16",
    "name",
    "content",
    "filepath",
    "line",
    "_rec2",
    "length",
    "doesNotThrow",
    "throws",
    "TypeError",
    "_rec3",
    "_rec4",
    "setUint16",
    "_rec5",
    "setFloat16",
    "_rec6",
    "_rec7",
    "_rec8",
    "getUint16"
  ],
  "mappings": "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",
  "sourceRoot": "/Users/moriken/Sites/float16",
  "sourcesContent": [
    "(function() {\n\nconst buffer = new ArrayBuffer(2);\nconst dataView = new DataView(buffer);\n\nfunction clear() {\n    new Uint16Array(buffer)[0] = 0;\n}\n\ndescribe(\"additional DataView methods\", () => {\n\n    describe(\"getFloat16()\", () => {\n\n        beforeEach( clear );\n\n        it(\"property `name` is 'getFloat16'\", () => {\n            assert( getFloat16.name === \"getFloat16\" );\n        });\n\n        it(\"property `length` is 2\", () => {\n            assert( getFloat16.length === 2 );\n        });\n\n        it(\"first argument must be DataView instance\", () => {\n            assert.doesNotThrow(() => getFloat16(dataView, 0));\n\n            assert.throws(() => getFloat16(null, 0), TypeError);\n            assert.throws(() => getFloat16(3.14, 0), TypeError);\n            assert.throws(() => getFloat16(\"test\", 0), TypeError);\n            assert.throws(() => getFloat16({}, 0), TypeError);\n            assert.throws(() => getFloat16([], 0), TypeError);\n            assert.throws(() => getFloat16(() => {}, 0), TypeError);\n        });\n\n        it(\"get 0.0007572174072265625 by big/little endian\", () => {\n            dataView.setUint16(0, 0x1234);\n            assert( getFloat16(dataView, 0) === 0.0007572174072265625 );\n\n            dataView.setUint16(0, 0x1234, true);\n            assert( getFloat16(dataView, 0, true) === 0.0007572174072265625 );\n        });\n\n    });\n\n    describe(\"setFloat16()\", () => {\n\n        beforeEach( clear );\n\n        it(\"property `name` is 'setFloat16'\", () => {\n            assert( setFloat16.name === \"setFloat16\" );\n        });\n\n        it(\"property `length` is 3\", () => {\n            assert( setFloat16.length === 3 );\n        });\n\n        it(\"first argument must be DataView instance\", () => {\n            assert.doesNotThrow(() => setFloat16(dataView, 0, 0));\n\n            assert.throws(() => setFloat16(null, 0, 0), TypeError);\n            assert.throws(() => setFloat16(3.14, 0, 0), TypeError);\n            assert.throws(() => setFloat16(\"test\", 0, 0), TypeError);\n            assert.throws(() => setFloat16({}, 0, 0), TypeError);\n            assert.throws(() => setFloat16([], 0, 0), TypeError);\n            assert.throws(() => setFloat16(() => {}, 0, 0), TypeError);\n        });\n\n        it(\"set 0.0007572174072265625 by big/little endian\", () => {\n            setFloat16(dataView, 0, 0.0007572174072265625);\n            assert( dataView.getUint16(0) === 0x1234 );\n\n            setFloat16(dataView, 0, 0.0007572174072265625, true);\n            assert( dataView.getUint16(0, true) === 0x1234 );\n        });\n\n    });\n\n});\n\n})();\n"
  ]
}